/**
 * Created by Spike on 14/10/2014.
 * Updated by Stephen on 16/10/2014.
 *
 * Updated for 3.1.2 with Client SSL
 */


/**
 * @file node-moog.js
 *
 * @fileOverview This is the module to use for constructing and sending events
 * to the Incident.MOOG REST Link Access Module (LAM) ready for processing and
 * clustering.
 *
 * @example
 * // require
 * var nm = require('node-moog');
 * // returns a new event object with defaults
 * var moogEvent = new nm.MoogEvent();
 * // return a moogREST connection
 * var options = {'url': 'http://testmoog:8881'};
 * var moogRest = new nm.MoogREST(options);
 *
 * @requires url
 * @requires util
 * @requires events
 * @requires http
 * @requires https
 * @requires fs
 *
 */

var urlParser = require('url'),
    util = require("util"),
    events = require("events"),
    http = require('http'),
    https = require('https'),
    fs = require('fs');
    proto = {};

/**
 * @description maxSockets=20
 * @type {number}
 */
http.globalAgent.maxSockets=20;

/**
 * @typedef moogEvent
 * @description An Event structured to be read by the Incident.MOOG REST LAM
 * @type {object}
 * @property {string} signature - the id used to correlate events into a single alert.
 * @property {string} source - synonym for host, the main entity that is understood to be a logical component in the system.
 * @property {string} source_id - an external identifier for the source entity.
 * @property {string} external_id - an external identifier for the specific event (event UID).
 * @property {string} manager - the logical name of the manager that transmits the event.
 * @property {string} source - the actual component or sub component that produced the event.
 * @property {string} class - an arbitrary classification for the event, to logically group it with other events of the same class.
 * @property {string} agent_location - if the event is generated by an agent then the source entity that the agent process executes within.
 * @property {string} type - an arbitrary type for the event, to logically group it with other events of the same type.
 * @property {number} severity - the severity from 0-5, 0-lowest 5-highest.
 * @property {string} description - the long form message from the event used as the human readable description.
 * @property {number} first_occurred - the date and time the event first occurred, in epoc seconds.
 * @property {string} agent_time - the date and time the agent identified the event, in epoc seconds.
 */

/**
 * Create a moogEvent to be passed to the Incident.MOOG REST LAM
 *
 * @param {moogEvent} dEvent - Default values to use in the constructor
 * @returns {moogEvent}
 * @constructor
 */
exports.MoogEvent = function(dEvent) {
    'use strict';
    var defEvent = dEvent || {};
    var mEvent = {};
    mEvent.signature = "";
    mEvent.source_id = defEvent.source_id || "NodePID-"+process.pid;
    mEvent.external_id = "";
    mEvent.manager = defEvent.manager || "NodeRESTLam";
    mEvent.source = defEvent.source || "NodePID-"+process.pid;
    mEvent.class = defEvent.class || "NodePlatform-"+process.platform;
    mEvent.agent_location = defEvent.agentLocation || process.argv[1];
    mEvent.type = defEvent.type || "NodeRest";
    mEvent.severity = 0;
    mEvent.description = "";
    mEvent.first_occurred = 0;
    mEvent.agent_time = 0;
    debug('Default event defined '+JSON.stringify(mEvent));
    return mEvent;
};

/**
 * @typedef options
 * @description The connection options used to construct the http ot https connection
 * @type {object}
 * @property {object} [connection] - a connection object.
 * @property {string} url - the to the Incident.MOOG REST endpoint including the port and protocol e.g. 'http://moogserver:8888'.
 * @property {string} [auth_token=my_secret] - the shared secret with Incident.MOOG.
 * @property {string} [certFile=./ssl/server.crt] - the path to the server certificate file.
 * @property {string} [cafile=./ssl/client.crt'] - the path to the client certificate file.
 * @property {boolean} [secure=false] - set the connection certificate checking.
 *
 * @typedef {object} eventHeaders
 * @description The http headers.
 * @type {object}
 * @property {string} [Accept=application/json] - must be json.
 * @property {string} [Content-Type=application/json] - must be jason.
 * @property {string} [Connection=keep-alive] - should be keep-alive.
 *
 * @typedef eventRequestOpts
 * @description The connection options (derived from the url).
 * @type {object}
 * @property {string} host - from the url.
 * @property {number} port=8888 - from the url or 8888.
 * @property {string} [method=POST] - allways POST.
 */

/**
 * Setup a connection to the Incident.MOOG REST endpoint and provide a method to send
 * events to that endpoint
 *
 * @param {options} options - The Options used in setting up the connection to Incident.MOOG
 * @constructor
 */
exports.MoogREST = function(options) {
    'use strict';
    var that = this;
    if (!options.url) {
        that.emit('error','No URL specified in options object');
        return;
    }

    that.options = options || {};
    that.connection = options.connection;
    that.auth_token = options.auth_token || 'my_secret';
    that.certFile = options.certFile || './ssl/server.crt';
    that.caFile = options.caFile || './ssl/client.crt';
    that.secure = options.rejectUnauthorized || false;
    that.url = urlParser.parse(options.url);
    that.eventHeaders = {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Connection': 'keep-alive'
    };
    that.eventRequestOpts = {
        host: that.url.hostname,
        port: that.url.port,
        method: 'POST'
    };
    debug('MoogRest init '+JSON.stringify(that));

    if (!that.url.host) {
        console.log('WARNING: No Host defined - using localhost');
        that.url.host = 'localhost';
    }
    if (!that.url.port) {
        console.log('WARNING: No port defined - using 8888');
        that.url.port = 8888;
    }
    if (!that.url.protocol){
        console.log('WARNING: No protocol defined - using https:');
        that.url.protocol = 'https:';
    }
    if (that.url.protocol === 'https:'){
        proto = https;
        if (that.certFile) {
            if (!fs.existsSync(that.certFile)) {
                console.log("ERROR: https specified but can't read :"+that.certFile);
                return;
            }
            try {
                debug('Loading '+that.certFile);
                that.eventRequestOpts.cert = fs.readFileSync(that.certFile);
            }
            catch (e) {
                console.log("ERROR: Could not read file "+that.certFile+" : " + e);
                return;
            }
        }
        if (that.caFile) {
            if (!fs.existsSync(that.caFile)) {
                console.log("ERROR: https specified but can't read :"+that.caFile);
                that.emit("error","Can't read file.");
                return;
            }
            try {
                debug('Loading '+that.caFile);
                that.eventRequestOpts.ca = fs.readFileSync(that.caFile);
            }
            catch (e) {
                console.log("ERROR: Could not read file "+that.caFile+" : " + e);
                return;
            }
        }
        that.eventRequestOpts.rejectUnauthorized = that.secure;
        // Need an agent as globalAgent will silently ignore the options
        that.eventRequestOpts.agent = new https.Agent(that.eventRequestOpts);
    } else {
        proto = http;
        debug('Connect using http');
        that.eventRequestOpts.rejectUnauthorized = false;
        // Need an agent as globalAgent will silently ignore the options
        that.eventRequestOpts.agent = new http.Agent(that.eventRequestOpts);
    }
    /**
     * Send the event or an array of events to Incident.MOOg REST LAM
     * @param {moogEvent|moogEvent[]} mEvent - A single event object of an array of event objects to send
     * @param callback - Callback passed by module
     */
    that.sendEvent = function (mEvent,callback) {

        // Parse the data we're going to add.

        var myEvent = mEvent;
        var epochDate = Math.round(Date.now() / 1000);
        var num = myEvent.external_id++ || 0;
        var event = {};
        var reqOpts = {};
        var eventRequest = {};
        var eventString = '';
        var contentLength;

        if (myEvent instanceof Array) {
            event.events = myEvent;
        } else {
            myEvent.signature = mEvent.signature || mEvent.source + ":" + mEvent.class + ":" + mEvent.type;
            myEvent.external_id = mEvent.external_id || "REST"+num;
            myEvent.source = mEvent.source || "NodeRest-" + num;
            myEvent.severity = mEvent.severity || 2;
            myEvent.description = mEvent.description || "No Description Provided";
            myEvent.first_occurred = mEvent.first_occured || epochDate;
            myEvent.agent_time = mEvent.agent_time || epochDate;
            event.events = [myEvent];
        }
        event.auth_token = that.auth_token;
        try {
            eventString = JSON.stringify(event);
            debug('Event to send '+eventString);
        }
        catch (e) {
            console.log("Error: Could not JSON.stringify the event - " + e);
            return;
        }
        contentLength = Buffer.byteLength(eventString, 'utf8');
        that.eventHeaders['Content-Length'] = contentLength;
        that.eventRequestOpts.headers= that.eventHeaders;
        reqOpts = that.eventRequestOpts;
        debug('Request Options: '+util.inspect(reqOpts));
        //debug('Request headers: '+util.inspect(reqOpts.headers));
        eventRequest = proto.request(reqOpts, function (res) {
            var returnString = "";
            var returnStatus = 0;

            res.on('data', function (d) {
                //debug('sendEvent returned '+util.inspect(returnString));
                returnString += d;
            });
            res.on('end', function () {
                returnStatus = res.statusCode || 0;
                debug('sendEvent end '+util.inspect(returnStatus));
                callback(returnString,returnStatus);
            });
        });
        eventRequest.on('error', function (err) {
            debug("ERROR Can't send "+err.stack);
            debug("Connection: "+that.url.protocol+"://"+reqOpts.host+":"+reqOpts.port);
            callback('Connection Error. '+that.url.protocol+"://"+reqOpts.host+':'+reqOpts.port,err);
            eventRequest.end();
        });
        debug('Now send event');
        eventRequest.write(eventString);
        eventRequest.end();
    };
};

/**
 * Add the Event emitter to MoogREST
 */
util.inherits(exports.MoogREST, events.EventEmitter);

/**
 * Generic Debug logging function
 * @function
 *
 */
var debug = function(){
    if (!process.env.DEBUG) return;
    var stack = new Error().stack;
    var args = Array.prototype.slice.call(arguments);
    var lines = stack.split('\n');
    var callee = lines[2].match(/at .* /i);
    util.debug('[node-moog.js] '+callee+' -> '+args);
};
